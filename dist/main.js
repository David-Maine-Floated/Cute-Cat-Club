/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("// import Chart from 'chart.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const main = document.getElementById('main-container');\n  const searchButton = document.querySelector('.search-breed');\n  const searchBreedInput = document.querySelector('.input');\n  const dropDownList = document.querySelector('.breed-select');\n  const searchBreedButton = document.querySelector('.search-breed-button');\n\n  //data population\n  const kittyImage = document.querySelector('.main-img');\n  const kittyName = document.querySelector('.kittyName');\n  const greetingSpace = document.querySelector('.greeting');\n  const otherAnimalsQuestion = document.querySelector('.other-animals.question');\n  const otherAnimalsMessage = document.querySelector('.other-animals.message');\n  const mainTitle = document.querySelector('.main-title');\n  const baseUrl = \"https://api.api-ninjas.com//v1\";\n  const searchUrl = \"https://api.api-ninjas.com//v1/cats?name=\";\n  const apiKey = \"SDVdR263Cz4mXx1lVGlUoA==uu0Usi2FFLAG9yWf\";\n  let colorScheme1 = ['rgba(255, 0, 244, 1)'];\n\n  //kitty data points\n\n  let currentKitty;\n  let friendliness = 0;\n  let shedding = 0;\n  let playfulness = 0;\n  let greeting;\n  let chart;\n  // if (!chart) {\n  //     makeChart();\n  // }\n  let treatOtherAnimalsMessage;\n  let name;\n  let treatOtherAnimalQuestion;\n  let maxWeight;\n  let minWeight;\n  let maxLifeExpec;\n  let minLifeExpec;\n  let chart2;\n  // if(!chart2) {\n  //     makeChart2()\n  // };\n\n  const fetchKitty = async e => {\n    e.preventDefault();\n    let breed = dropDownList.value;\n    try {\n      const apiKey = \"SDVdR263Cz4mXx1lVGlUoA==uu0Usi2FFLAG9yWf\";\n      const baseUrl = \"https://api.api-ninjas.com/v1/cats?name=\";\n      let response = await fetch(baseUrl + breed, {\n        method: 'GET',\n        headers: {\n          'X-Api-Key': apiKey,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        let resBody = await response.json();\n        currentKitty = resBody;\n        console.log(resBody);\n      } else {\n        throw new Error(`API request failed with status ${response.status}: ${response.message}`);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    populateData();\n  };\n  function populateData() {\n    name = randomName();\n    let currentKittyData = currentKitty[0];\n    kittyImage.src = currentKittyData.image_link;\n    kittyName.innerHTML = currentKittyData.name;\n    friendliness = currentKittyData.family_friendly;\n    playfulness = currentKittyData.playfulness;\n    shedding = currentKittyData.shedding;\n    greeting = createGreeting();\n    greetingSpace.innerHTML = greeting;\n    treatOtherAnimalsScore = currentKittyData.other_pets_friendly;\n    console.log(treatOtherAnimalsScore);\n    if (treatOtherAnimalsScore <= 4) {\n      treatOtherAnimalsMessage = otherAnimals[treatOtherAnimalsScore - 1];\n    } else {\n      treatOtherAnimalsMessage = generateOtherAnimalsLvl5RatingMessage();\n    }\n    ;\n    treatOtherAnimalQuestion = createOtherAnimalsQuestion();\n    otherAnimalsQuestion.innerHTML = treatOtherAnimalQuestion;\n    otherAnimalsMessage.innerHTML = treatOtherAnimalsMessage;\n    minWeight = currentKittyData.min_weight;\n    maxWeight = currentKittyData.max_weight;\n    minLifeExpec = currentKittyData.min_life_expectancy;\n    maxLifeExpec = currentKittyData.max_life_expectancy;\n    if (chart) {\n      chart.destroy();\n    }\n    makeChart();\n    if (chart2) {\n      chart2.destroy();\n    }\n    makeChart2();\n  }\n\n  //event listneres\n\n  searchBreedButton.addEventListener('click', fetchKitty);\n  const validBreeds = ['Siamese cat', 'Maine Coon', 'British Shorthair', 'Ragdoll', 'American Shorthair', 'Abyssinian', 'Scottish Fold', 'Birman', 'Bombay', 'Siberian', 'Norwegian Forest', 'Russian Blue', 'American Curl', 'American Bobtail', 'Devon Rex', 'Balinese', 'Havana Brown', 'Himalayan', 'Turkish Angora', 'Manx', 'Japanese Bobtail', 'Ragamuffin', 'American Wirehair', 'Cornish Rex', 'Egyptian Mau', 'Somali', 'Selkirk Rex', 'Singapura', 'Korat', 'Ocicat', 'Tonkinese', 'Turkish Van', 'LaPerm', 'Chausie', 'Burmilla', 'Lykoi'];\n  const names = ['Muffins', 'Cersei', 'Lil Nuggets', 'Cowboy', 'Mr. Toe Beans', 'Rocky', 'Snowball', 'Bernard', 'Whiskey', 'Fritz', 'Emilia', 'Big Nuggets', 'Thedra', 'Judy', 'Clementine', 'Ruth', 'Hudson', 'Sir Licks A Lot', 'Mrs. Hangry', 'Jerry Poppins', 'Camilla', 'Obama', 'Hermoine', 'Cole', 'Dr DooGiggle', 'Santy Clawz', 'Jawz', 'Bilbo', 'Dracula', 'Tinkerbell', 'Fluff 2.0'];\n  const greetings = ['Now Presenting: ', 'Please Welcome: ', 'The Prestigious: ', \"We can't believe our eyes! It's really: \", 'Nice to see you again: ', 'Most Excite to introduce: ', 'Such raw beauty, hello: ', 'The Elegant: ', 'Welcome back to the club: '];\n  const otherAnimals = ['\"I will love and cuddle them foreverrrr.\"', '\"I\\'d really enjoy a sibling.\"', ' \"I could go either way if I\\'m being honest.\"', '\"If they leave me and my food alone, i\\'ll leave them and their food alone\"'];\n  const otherAnimals5Rating = ['\"I will destroy. I will consume. There will be nothing left.\"', '\"I will wreak utter destruction on any fool who crosses my path.\"', '\"I will stalk them. I will wait till their alone. I will eat them.\"', '\"These Fangs, these claws...they are here for a reason. Bring me an animal and I will educate you.'];\n  const otherAnimalsTitleEndings = ['! Do you dig other animals?', '! The fans want to know...do you like other animals?', '! How do you feel about other animal friends?', \"! We're a little scared to ask but...do you allow other animals in your life?\", '! The fans have to know! Are interetsed in other animals? Or are you a solo kind of cat?'];\n  const otherAnimalsTitleOpenings = ['Hey ', 'Hi ', 'Question for you ', 'If we could have your attention ', 'Well hello ', 'Hi there ', 'Howdy ', 'Bonjour '];\n  function randomName() {\n    let length = names.length - 1;\n    let i = Math.floor(Math.random() * length);\n    return names[i];\n  }\n  function createGreeting() {\n    let length = greetings.length - 1;\n    let i = Math.floor(Math.random() * length);\n    greeting = greetings[i];\n    return greeting + name;\n  }\n  function createOtherAnimalsQuestion() {\n    let length1 = otherAnimalsTitleOpenings.length - 1;\n    let i1 = Math.floor(Math.random() * length1);\n    let opening = otherAnimalsTitleOpenings[i1];\n    let length2 = otherAnimalsTitleEndings.length - 1;\n    let i2 = Math.floor(Math.random() * length2);\n    let ending = otherAnimalsTitleEndings[i2];\n    return opening + name + ending;\n  }\n  function generateOtherAnimalsLvl5RatingMessage() {\n    let length = otherAnimals5Rating.length - 1;\n    let i = Math.floor(Math.random() * length);\n    return otherAnimals5Rating[i];\n  }\n  validBreeds.forEach(breed => {\n    let op = document.createElement('option');\n    op.value = breed;\n    op.innerHTML = breed;\n    dropDownList.appendChild(op);\n  });\n  function makeChart() {\n    let colorScheme = colorScheme1;\n    const ctx = document.getElementById('firstChart');\n    let chartData = [friendliness, shedding, playfulness];\n    Chart.defaults.font.size = 14;\n    Chart.defaults.font_weight = 100;\n    Chart.defaults.font.family = 'Orbitron';\n    Chart.defaults.plugins.legend = false;\n    Chart.defaults.color = colorScheme[0];\n    Chart.defaults.hoverColor = 'black';\n    chart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Friendliness', 'Shedding', 'Playfulness'],\n        datasets: [{\n          label: 'kitty stats',\n          data: chartData,\n          borderWidth: 1,\n          hoverBackgroundColor: 'rgba(112, 0, 255, 0.84)',\n          hoverBorderColor: 'rgba(239, 255, 0, 0.96)',\n          hoverBorderWidth: '2'\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n            grid: {\n              display: false\n            }\n          },\n          x: {\n            ticks: {},\n            grid: {\n              display: false\n            }\n          }\n        },\n        legend: {\n          labels: {\n            textShadow: '-.5px 0 black, 0 .5px black, .5px 0 black, 0 -.5px black'\n          }\n        }\n      }\n    });\n  }\n  function makeChart2() {\n    console.log('hello');\n    let colorScheme = colorScheme1;\n    const ctx = document.getElementById('secondChart');\n    let chartData = [minWeight, maxWeight, minLifeExpec, maxLifeExpec];\n    Chart.defaults.font.size = 14;\n    Chart.defaults.font.family = 'Orbitron';\n    Chart.defaults.plugins.legend = false;\n    Chart.defaults.color = 'rgba(255, 36, 187, 1)';\n    chart2 = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Min Weight', 'Max Weight', 'Min Life Expectency', 'Max Life Expectency'],\n        datasets: [{\n          label: 'kitty stats',\n          data: chartData,\n          borderWidth: 1,\n          backgroundColor: 'rgba(39, 236, 230, 0.65)',\n          hoverBackgroundColor: 'rgba(255, 48, 0, 0.84)',\n          hoverBorderColor: 'rgba(117, 0, 255, 0.84)',\n          hoverBorderWidth: '2'\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n            grid: {\n              display: false\n            }\n          },\n          x: {\n            grid: {\n              display: false\n            }\n          }\n        },\n        legend: {\n          labels: {\n            textShadow: '-.5px 0 black, 0 .5px black, .5px 0 black, 0 -.5px black'\n          }\n        }\n      }\n    });\n  }\n  const fontColors = [\"blue\", \"yellow\", 'rgba(245, 40, 145, 0.8)', 'rgba(39, 236, 245, 1)', 'rgba(39, 138, 245, 1)', 'rgba(61, 39, 245, 1)', 'rgba(132, 255, 36, 1)', 'rgba(150, 36, 255, 1)', 'rgba(219, 36, 255, 1)', 'rgba(255, 36, 100, 1)', 'rgba(55, 36, 255, 1)', 'white', 'skyblue', 'rgba(255, 36, 36, 1)', 'rgba(255, 105, 36, 1)', 'rgba(36, 255, 228, 1)', 'rgba(255, 219, 36, 1)', 'rgba(214, 255, 36, 1)'];\n  let currentColor = 0;\n  function changeColor() {\n    console.log('hihi');\n    currentColor++;\n    if (currentColor >= fontColors.length) {\n      currentColor = 0;\n    }\n    ;\n    mainTitle.style.color = fontColors[currentColor];\n  }\n  ;\n  setInterval(changeColor, 500);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jdXRlLWNhdC1jbHViLW1haW4vLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;